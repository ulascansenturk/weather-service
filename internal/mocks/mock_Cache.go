// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	inmemorycache "ulascansenturk/weather-service/internal/inmemorycache"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockCache is an autogenerated mock type for the Cache type
type MockCache struct {
	mock.Mock
}

// Get provides a mock function with given fields: location
func (_m *MockCache) Get(location string) (*inmemorycache.WeatherCacheData, bool, error) {
	ret := _m.Called(location)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *inmemorycache.WeatherCacheData
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (*inmemorycache.WeatherCacheData, bool, error)); ok {
		return rf(location)
	}
	if rf, ok := ret.Get(0).(func(string) *inmemorycache.WeatherCacheData); ok {
		r0 = rf(location)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*inmemorycache.WeatherCacheData)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(location)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(location)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Set provides a mock function with given fields: location, data, ttl
func (_m *MockCache) Set(location string, data *inmemorycache.WeatherCacheData, ttl time.Duration) error {
	ret := _m.Called(location, data, ttl)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *inmemorycache.WeatherCacheData, time.Duration) error); ok {
		r0 = rf(location, data, ttl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockCache creates a new instance of MockCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCache {
	mock := &MockCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
