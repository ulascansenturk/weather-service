// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"
	service "ulascansenturk/weather-service/internal/service"

	mock "github.com/stretchr/testify/mock"
)

// MockWeatherService is an autogenerated mock type for the WeatherService type
type MockWeatherService struct {
	mock.Mock
}

// GetWeather provides a mock function with given fields: ctx, location
func (_m *MockWeatherService) GetWeather(ctx context.Context, location string) (service.WeatherResponse, error) {
	ret := _m.Called(ctx, location)

	if len(ret) == 0 {
		panic("no return value specified for GetWeather")
	}

	var r0 service.WeatherResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (service.WeatherResponse, error)); ok {
		return rf(ctx, location)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) service.WeatherResponse); ok {
		r0 = rf(ctx, location)
	} else {
		r0 = ret.Get(0).(service.WeatherResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, location)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockWeatherService creates a new instance of MockWeatherService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWeatherService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWeatherService {
	mock := &MockWeatherService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
