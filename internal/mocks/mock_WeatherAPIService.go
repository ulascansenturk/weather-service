// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockWeatherAPIService is an autogenerated mock type for the WeatherAPIService type
type MockWeatherAPIService struct {
	mock.Mock
}

// GetHTTPClient provides a mock function with given fields:
func (_m *MockWeatherAPIService) GetHTTPClient() *http.Client {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetHTTPClient")
	}

	var r0 *http.Client
	if rf, ok := ret.Get(0).(func() *http.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Client)
		}
	}

	return r0
}

// GetWeatherData provides a mock function with given fields: location
func (_m *MockWeatherAPIService) GetWeatherData(location string) (float64, float64, bool, bool, error) {
	ret := _m.Called(location)

	if len(ret) == 0 {
		panic("no return value specified for GetWeatherData")
	}

	var r0 float64
	var r1 float64
	var r2 bool
	var r3 bool
	var r4 error
	if rf, ok := ret.Get(0).(func(string) (float64, float64, bool, bool, error)); ok {
		return rf(location)
	}
	if rf, ok := ret.Get(0).(func(string) float64); ok {
		r0 = rf(location)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(string) float64); ok {
		r1 = rf(location)
	} else {
		r1 = ret.Get(1).(float64)
	}

	if rf, ok := ret.Get(2).(func(string) bool); ok {
		r2 = rf(location)
	} else {
		r2 = ret.Get(2).(bool)
	}

	if rf, ok := ret.Get(3).(func(string) bool); ok {
		r3 = rf(location)
	} else {
		r3 = ret.Get(3).(bool)
	}

	if rf, ok := ret.Get(4).(func(string) error); ok {
		r4 = rf(location)
	} else {
		r4 = ret.Error(4)
	}

	return r0, r1, r2, r3, r4
}

// GetWeatherFromAPIWeatherStackAPI provides a mock function with given fields: location
func (_m *MockWeatherAPIService) GetWeatherFromAPIWeatherStackAPI(location string) (float64, error) {
	ret := _m.Called(location)

	if len(ret) == 0 {
		panic("no return value specified for GetWeatherFromAPIWeatherStackAPI")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (float64, error)); ok {
		return rf(location)
	}
	if rf, ok := ret.Get(0).(func(string) float64); ok {
		r0 = rf(location)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(location)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWeatherFromWeatherAPI provides a mock function with given fields: location
func (_m *MockWeatherAPIService) GetWeatherFromWeatherAPI(location string) (float64, error) {
	ret := _m.Called(location)

	if len(ret) == 0 {
		panic("no return value specified for GetWeatherFromWeatherAPI")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (float64, error)); ok {
		return rf(location)
	}
	if rf, ok := ret.Get(0).(func(string) float64); ok {
		r0 = rf(location)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(location)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockWeatherAPIService creates a new instance of MockWeatherAPIService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWeatherAPIService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWeatherAPIService {
	mock := &MockWeatherAPIService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
