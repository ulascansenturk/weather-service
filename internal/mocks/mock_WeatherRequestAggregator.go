// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"
	service "ulascansenturk/weather-service/internal/service"

	mock "github.com/stretchr/testify/mock"
)

// MockWeatherRequestAggregator is an autogenerated mock type for the WeatherRequestAggregator type
type MockWeatherRequestAggregator struct {
	mock.Mock
}

// AddRequest provides a mock function with given fields: ctx, location
func (_m *MockWeatherRequestAggregator) AddRequest(ctx context.Context, location string) (<-chan service.WeatherResponse, error) {
	ret := _m.Called(ctx, location)

	if len(ret) == 0 {
		panic("no return value specified for AddRequest")
	}

	var r0 <-chan service.WeatherResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (<-chan service.WeatherResponse, error)); ok {
		return rf(ctx, location)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan service.WeatherResponse); ok {
		r0 = rf(ctx, location)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan service.WeatherResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, location)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessQueueForTesting provides a mock function with given fields: location
func (_m *MockWeatherRequestAggregator) ProcessQueueForTesting(location string) {
	_m.Called(location)
}

// Shutdown provides a mock function with given fields:
func (_m *MockWeatherRequestAggregator) Shutdown() {
	_m.Called()
}

// NewMockWeatherRequestAggregator creates a new instance of MockWeatherRequestAggregator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWeatherRequestAggregator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWeatherRequestAggregator {
	mock := &MockWeatherRequestAggregator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
