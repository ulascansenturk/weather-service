// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	weatherquery "ulascansenturk/weather-service/internal/db/weatherquery"

	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// GetRecentWeatherQuery provides a mock function with given fields: location
func (_m *MockRepository) GetRecentWeatherQuery(location string) (*weatherquery.WeatherQuery, error) {
	ret := _m.Called(location)

	if len(ret) == 0 {
		panic("no return value specified for GetRecentWeatherQuery")
	}

	var r0 *weatherquery.WeatherQuery
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*weatherquery.WeatherQuery, error)); ok {
		return rf(location)
	}
	if rf, ok := ret.Get(0).(func(string) *weatherquery.WeatherQuery); ok {
		r0 = rf(location)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*weatherquery.WeatherQuery)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(location)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogWeatherQuery provides a mock function with given fields: location, service1Temp, service2Temp, requestCount
func (_m *MockRepository) LogWeatherQuery(location string, service1Temp float64, service2Temp float64, requestCount int) error {
	ret := _m.Called(location, service1Temp, service2Temp, requestCount)

	if len(ret) == 0 {
		panic("no return value specified for LogWeatherQuery")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, float64, float64, int) error); ok {
		r0 = rf(location, service1Temp, service2Temp, requestCount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
